// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250307114637_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublicId = new Guid("6011df91-28cb-4b7d-90a4-2cad8780cb47"),
                            QuestionId = 1,
                            Value = "Пляжный отдых"
                        },
                        new
                        {
                            Id = 2,
                            PublicId = new Guid("62137fd5-aa19-42b0-99d2-01546adc920d"),
                            QuestionId = 1,
                            Value = "Походы и природа"
                        },
                        new
                        {
                            Id = 3,
                            PublicId = new Guid("a49a6a03-8f2e-4135-8f27-24ce32c09bb5"),
                            QuestionId = 1,
                            Value = "Городские экскурсии"
                        },
                        new
                        {
                            Id = 4,
                            PublicId = new Guid("a157c9d1-c162-4b2f-9d62-1861fc5d19bb"),
                            QuestionId = 2,
                            Value = "Кофе"
                        },
                        new
                        {
                            Id = 5,
                            PublicId = new Guid("95921471-615e-4e3e-8c9e-311fe9731763"),
                            QuestionId = 2,
                            Value = "Чай"
                        },
                        new
                        {
                            Id = 6,
                            PublicId = new Guid("9862a466-1873-4e41-b878-f0c156513596"),
                            QuestionId = 2,
                            Value = "Сок"
                        },
                        new
                        {
                            Id = 7,
                            PublicId = new Guid("d18e3ace-0fd4-418e-bed3-97feebe4310b"),
                            QuestionId = 2,
                            Value = "Вода"
                        },
                        new
                        {
                            Id = 8,
                            PublicId = new Guid("54018141-dac7-4a7e-93de-faf87a5f5197"),
                            QuestionId = 3,
                            Value = "Ужасы"
                        },
                        new
                        {
                            Id = 9,
                            PublicId = new Guid("c9669b52-d98f-4c28-94c6-97f0eb1eb39c"),
                            QuestionId = 3,
                            Value = "Комедия"
                        },
                        new
                        {
                            Id = 10,
                            PublicId = new Guid("2a04d716-f184-47d4-ba86-c1552982f583"),
                            QuestionId = 3,
                            Value = "Фантастика"
                        },
                        new
                        {
                            Id = 11,
                            PublicId = new Guid("c8aa2ace-742b-487c-9c55-88e45f3755b1"),
                            QuestionId = 3,
                            Value = "Детектив"
                        });
                });

            modelBuilder.Entity("Domain.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SurveyId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SurveyId", "OrderId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 0,
                            PublicId = new Guid("1ff64650-26ac-4785-8336-f2eb141becb3"),
                            SurveyId = 1,
                            Text = "Какой тип отдыха вам больше нравится?"
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            PublicId = new Guid("3b6af6e1-159c-4c6b-8e59-2e1f857b8f50"),
                            SurveyId = 1,
                            Text = "Какой напиток вы предпочитаете по утрам?"
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 3,
                            PublicId = new Guid("67d5f087-66d8-4de6-a336-b96c7492da02"),
                            SurveyId = 1,
                            Text = "Какие жанры фильмов вам нравятся?"
                        });
                });

            modelBuilder.Entity("Domain.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("InterviewId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Domain.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublicId = new Guid("582f970f-b09f-4db7-9c97-85fb3b55c353"),
                            Title = "Test Survey"
                        });
                });

            modelBuilder.Entity("Domain.Answer", b =>
                {
                    b.HasOne("Domain.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Interview", b =>
                {
                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Result", b =>
                {
                    b.HasOne("Domain.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Interview", "Interview")
                        .WithMany("Results")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Interview");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Interview", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Domain.Survey", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
